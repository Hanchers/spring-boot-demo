spring:
  shardingsphere:
    datasource:
      names: db0,db1
      db0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.0.111:3306/db_0?zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
        username: dev
        password: dev_123
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.0.111:3306/db_1?zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
        username: dev
        password: dev_123
    sharding:
      tables:
        t_order:
#          actual-data-nodes: db$->{0..1}.order_$->{0..4}
          actual-data-nodes: db0.order_0,db1.order_1,db0.order_2,db1.order_3,
          ## 指定分库规则
          database-strategy:
            inline:
              sharding-column: handler_code
              algorithm-expression: db$->{handler_code % 2}
          ## 指定分表规则
          table-strategy:
            inline:
              sharding-column: handler_code
              algorithm-expression: order_$->{handler_code % 4}
          keyGenerator:
            type: SNOWFLAKE
            column: id
        order_handle:
          actual-data-nodes: db0.order_handle_$->{[0,2]},db1.order_handle_$->{[1,3]},
          ## 指定分库规则
          database-strategy:
            inline:
              sharding-column: handler_code
              algorithm-expression: db$->{handler_code % 2}
          ## 指定分表规则
          table-strategy:
            inline:
              sharding-column: handler_code
              algorithm-expression: order_handle_$->{handler_code % 4}

        order_handle_record:
          actual-data-nodes: db0.order_handle_record_$->{[0,2]},db1.order_handle_record_$->{[1,3]}
          ## 指定分库规则
          database-strategy:
            inline:
              sharding-column: operator_code
              algorithm-expression: db$->{operator_code % 2}
          ## 指定分表规则
          table-strategy:
            inline:
              sharding-column: operator_code
              algorithm-expression: order_handle_record_$->{operator_code % 4}
      ## 绑定主表与子表，避免关联查询导致的全数据源路由
      binding-tables: t_order,order_handle,order_handle_record

      ## 配置广播表：以广播的形式保存（如果只涉及查询的话可以不配置，会随机取一个数据源）
#      broadcast-tables: order_level

    ## 打印sql
    props:
      sql:
        show: true
